
import ImageUploader from "@/components/ImageUploader";
import { UserContext } from "@/context/UserContext";
import { getUserByUid, updateUserData } from "@/helpers/users";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { toast } from 'react-toastify';

const EditProfile = () => {
    const router = useRouter();
    const { loggedUser } = useContext(UserContext);
    const { t } = useTranslation();

    const [registrationError, setRegistrationError] = useState({});
    const [formData, setFormData] = useState({
        imageProfileUrl: '',
        name: '',
        lastname: '',
        phone: '',
        identification: '',
        fb: '',
        linkedin: '',
        twitter: '',
        webpage: ''
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({
            ...formData,
            [name]: value,
        });
    };

    // FunciÃ³n para actualizar el estado de la imagen
    const handleImage = (imageUrl) => {
        console.log("imageUrl", imageUrl);
        setFormData({
            ...formData,
            imageProfileUrl: imageUrl,
        });
    };

    const validateForm = async () => {
        const errors = {};
        if (!formData.name) errors.name = t("validations.name-required");
        if (!formData.lastname) errors.lastname = t("validations.surnames-required");

        setRegistrationError(errors);
        return Object.keys(errors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const validationsResult = await validateForm();
        if (!validationsResult) return;
        updateUserData(formData).then(() => {
            toast.success(t("success.user-edited"));
            router.back()
        }).catch(() => {
            toast.error(t("errors.user-not-edited"));
        })
    };

    useEffect(() => {
        if (loggedUser) {
            getUserByUid(loggedUser.uid).then(user => {
                setFormData(
                    {
                        imageProfileUrl: user.imageProfileUrl,
                        name: user.name.replace(/(^\w{1})|(\s+\w{1})/g, (letra) => letra.toUpperCase()),
                        lastname: user.lastname.replace(/(^\w{1})|(\s+\w{1})/g, (letra) => letra.toUpperCase()),
                        phone: user.phone,
                        identification: user.identification,
                        fb: user.fb,
                        linkedin: user.linkedin,
                        twitter: user.twitter,
                        webpage: user.webpage,
                        uid: user.uid
                    }
                )
            })
        }
    }, [loggedUser])

    return (
        <>
            <Head>
                <title>{t("navbar.editProfile")} | ArmourWeb</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/images/awLogo-nobg.png" />
            </Head>
            <form onSubmit={handleSubmit} className="bg-main h-[92vh] px-20 pt-10 pb-20 overflow-y-auto scrollbar">
                <div className="flex items-center mx-auto italic rounded-[.5rem] border-2 border-black w-[20rem] h-[6rem] justify-center"><h1 className="m-0 font-bold text-[3rem] ">{t("navbar.my-profile")}</h1></div>

                <div className="w-[60%] mx-auto mt-10">
                    <ImageUploader divDesign="mb-10 w-[12rem] h-[12rem] bg-gray-800 rounded-full mx-auto shadow-md" setImage={handleImage} image={formData?.imageProfileUrl} />
                    <p className="text-[1.8rem] font-bold mb-1">{t('user-data.basic-info')}</p>
                    <hr className='border border-[#224553] mb-5 w-5/12' />
                    <div className="flex items-center justify-between my-3 relative">
                        <label htmlFor="name" className="text-[1.5rem] font-semibold after:content-['*'] after:ml-0.5 after:text-red-500">
                            {t('user-data.name')}:
                        </label>
                        <input
                            type="text"
                            id="name"
                            name="name"
                            value={formData.name}
                            onChange={handleChange}
                            className={`text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4 ${registrationError.name && '!border-red-400'}`}
                        />
                        {registrationError.name && <p className="animate__animated animate__flipInX absolute text-xs font-medium -bottom-3 right-0 text-red-600">{registrationError.name}</p>}
                    </div>
                    <div className="flex items-center justify-between my-3 relative">
                        <label htmlFor="lastname" className="text-[1.5rem] font-semibold after:content-['*'] after:ml-0.5 after:text-red-500">
                            {t('user-data.lastname')}:
                        </label>
                        <input
                            type="text"
                            id="lastname"
                            name="lastname"
                            value={formData.lastname}
                            onChange={handleChange}
                            className={`text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4 ${registrationError.lastname && '!border-red-400'}`}
                        />
                        {registrationError.lastname && <p className="animate__animated animate__flipInX absolute text-xs font-medium -bottom-3 right-0 text-red-600">{registrationError.lastname}</p>}
                    </div>
                    <div className="flex items-center justify-between my-3">
                        <label htmlFor="phone" className="text-[1.5rem] font-semibold">
                            {t('user-data.phone')}:
                        </label>
                        <input
                            type="text"
                            id="phone"
                            name="phone"
                            value={formData.phone}
                            onChange={handleChange}
                            className="text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4"
                        />
                    </div>
                    <div className="flex items-center justify-between my-3">
                        <label htmlFor="lastname" className="text-[1.5rem] font-semibold">
                            {t('user-data.id')}:
                        </label>
                        <input
                            type="text"
                            id="identification"
                            name="identification"
                            value={formData.identification}
                            onChange={handleChange}
                            className="text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4"
                        />
                    </div>

                    <p className="text-[1.8rem] font-bold mt-12 mb-1">{t("user-data.social-network")}</p>
                    <hr className='border border-[#224553] mb-5 w-5/12' />
                    <div className="flex items-center justify-between my-3">
                        <label htmlFor="phone" className="text-[1.5rem] font-semibold">
                            {t('user-data.fb')}:
                        </label>
                        <input
                            type="text"
                            id="fb"
                            name="fb"
                            value={formData.fb}
                            onChange={handleChange}
                            className="text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4"
                        />
                    </div>
                    <div className="flex items-center justify-between my-3">
                        <label htmlFor="phone" className="text-[1.5rem] font-semibold">
                            {t('user-data.twitter')}:
                        </label>
                        <input
                            type="text"
                            id="twitter"
                            name="twitter"
                            value={formData.twitter}
                            onChange={handleChange}
                            className="text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4"
                        />
                    </div>
                    <div className="flex items-center justify-between my-3">
                        <label htmlFor="phone" className="text-[1.5rem] font-semibold">
                            {t('user-data.linked-in')}:
                        </label>
                        <input
                            type="text"
                            id="linkedin"
                            name="linkedin"
                            value={formData.linkedin}
                            onChange={handleChange}
                            className="text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4"
                        />
                    </div>
                    <div className="flex items-center justify-between my-3">
                        <label htmlFor="phone" className="text-[1.5rem] font-semibold">
                            {t('user-data.web-page')}:
                        </label>
                        <input
                            type="text"
                            id="webpage"
                            name="webpage"
                            value={formData.webpage}
                            onChange={handleChange}
                            className="text-[1.2rem] font-semibold bg-transparent border border-3 border-gray-800 rounded-xl text-black px-4"
                        />
                    </div>
                </div>
                <div className="flex w-[35%] mx-auto mt-10">
                    <Link href={"/myProfile"}>
                        <div className="mx-auto cursor-pointer relative flex items-center justify-center w-[8rem] bg-red-700 border-2 border-gray-300 hover:bg-red-800 text-[1.4rem] text-center mt-3 py-2 px-4 rounded-xl text-gray-200">
                            <button className="flex items-center h-full">
                                {t('buttons.cancel')}
                            </button>
                        </div>
                    </Link>
                    <div className="mx-auto cursor-pointer relative flex items-center justify-center w-[8rem] bg-green-700 border-2 border-gray-300 hover:bg-green-800 text-[1.4rem] text-center mt-3 rounded-xl text-gray-200">
                        <button type="submit" className="py-2 px-4 flex items-center w-full h-full">
                            {t('buttons.confirm')}
                        </button>
                    </div>
                </div>
            </form>
        </>
    );
}

export default EditProfile;